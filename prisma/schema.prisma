// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id         Int      @id @default(autoincrement())
  // 用户昵称
  name       String   @unique
  // 用户姓名
  username   String
  password   String
  phone      String?
  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  roles UserRole[]

  @@map("user")
}

// 角色表
model Role {
  id          Int      @id @default(autoincrement())
  roleName    String   @unique
  description String?
  createTime  DateTime @default(now()) @map("createTime")
  updateTime  DateTime @updatedAt @map("updateTime")

  users UserRole[]
  menus RoleMenu[]

  @@map("role")
}

// 菜单表
model Menu {
  id         Int      @id @default(autoincrement())
  name       String
  // 菜单的父菜单id，默认为1
  pid        Int?
  // 菜单类型，菜单为1，按钮为2
  type       Int?
  // 菜单的等级
  level      Int?
  // 菜单权限值
  code       String?
  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  roles RoleMenu[]

  @@map("menu")
}

// 品牌表
model Trademark {
  id         Int      @id @default(autoincrement())
  tmName     String
  logoUrl    String
  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  @@map("trademark")
}

// 商品分类表
model Category {
  id    Int    @id @default(autoincrement())
  name  String
  pid   Int
  level Int    @default(1)

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  attrs Attr[]

  @@map("category")
}

// 商品属性表
model Attr {
  id            Int    @id @default(autoincrement())
  attrName      String
  categoryId    Int
  categoryLevel Int    @default(3) // 级别默认设置3，因为只有3级分类才能查出属性

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  attrValue AttrValue[]

  @@map("attr")
}

// 商品属性值表
model AttrValue {
  id        Int    @id @default(autoincrement())
  valueName String
  attrId    Int

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")
  attr       Attr     @relation(fields: [attrId], references: [id], onDelete: Cascade)

  @@map("attr_value")
}

// SPU
model Spu {
  id          Int     @id @default(autoincrement())
  spuName     String
  description String?
  category3Id Int
  tmId        Int?

  spuImageList    SpuImg[]
  spuSaleAttrList SaleAttr[]

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  @@map("spu")
}

// spu图片
model SpuImg {
  id      Int     @id @default(autoincrement())
  imgName String
  imgUrl  String
  name    String?
  url     String?

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")
  spu        Spu?     @relation(fields: [spuId], references: [id], onDelete: Cascade)
  spuId      Int?

  @@map("spu_img")
}

// spu属性
model SaleAttr {
  id                   Int             @id @default(autoincrement())
  baseSaleAttrId       String
  saleAttrName         String
  flag                 Boolean?
  saleAttrValue        String?
  spuSaleAttrValueList SaleAttrValue[]

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")
  spu        Spu?     @relation(fields: [spuId], references: [id], onDelete: Cascade)
  spuId      Int?

  @@map("sale_attr")
}

// spu属性值
model SaleAttrValue {
  id                Int      @id @default(autoincrement())
  spuId             Int?
  baseSaleAttrId    String
  saleAttrValueName String
  saleAttrName      String?
  isChecked         Boolean?

  createTime DateTime  @default(now()) @map("createTime")
  updateTime DateTime  @updatedAt @map("updateTime")
  saleAttr   SaleAttr? @relation(fields: [saleAttrId], references: [id], onDelete: Cascade)
  saleAttrId Int?

  @@map("sale_attr_value")
}

// sku
model Sku {
  id                   Int           @id @default(autoincrement())
  category3Id          Int
  spuId                Int
  tmId                 Int?
  price                Float
  skuName              String
  skuDesc              String?
  weight               Float?
  skuDefaultImg        String?
  isSale               Int?          @default(0)
  skuAttrValueList     SkuAttr[]
  skuSaleAttrValueList SkuSaleAttr[]
  skuImageList         SkuImg[]

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  @@map("sku")
}

// sku属性
model SkuAttr {
  id      Int  @id @default(autoincrement())
  attrId  Int
  valueId Int
  Sku     Sku? @relation(fields: [skuId], references: [id], onDelete: Cascade)
  skuId   Int?

  @@map("sku_attr")
}

// sku销售属性
model SkuSaleAttr {
  id              Int  @id @default(autoincrement())
  saleAttrId      Int
  saleAttrValueId Int
  Sku             Sku? @relation(fields: [skuId], references: [id], onDelete: Cascade)
  skuId           Int?

  @@map("sku_sale_attr")
}

// sku图片
model SkuImg {
  id        Int     @id @default(autoincrement())
  isDefault String?
  spuImgId  Int
  Sku       Sku?    @relation(fields: [skuId], references: [id], onDelete: Cascade)
  skuId     Int?

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  @@map("sku_img")
}

// spu基础销售属性
model BaseSaleAttr {
  id   Int    @id @default(autoincrement())
  name String

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  @@map("base_sale_attr")
}

// 用户头像
model Photo {
  id          Int      @id @default(autoincrement())
  name        String?
  url         String
  description String?
  createTime  DateTime @default(now()) @map("createTime")
  updateTime  DateTime @updatedAt @map("updateTime")
}

// 关系表

// 用户_角色关系表
model UserRole {
  userId     Int      @map("user_id") // 使用 `@map` 映射到 `user_id` 列
  roleId     Int      @map("role_id") // 使用 `@map` 映射到 `role_id` 列
  user       User     @relation(fields: [userId], references: [id]) // 定义与 User 的关系
  role       Role     @relation(fields: [roleId], references: [id]) // 定义与 Role 的关系
  createTime DateTime @default(now()) @map("create_time") // 创建时间，默认为当前时间

  @@id([userId, roleId]) // 复合主键，由 userId 和 roleId 组成
  @@map("user_role") // 自定义表名
}

// 角色_菜单关系表
model RoleMenu {
  roleId     Int      @map("role_id")
  menuId     Int      @map("menu_id")
  role       Role     @relation(fields: [roleId], references: [id])
  menu       Menu     @relation(fields: [menuId], references: [id])
  createTime DateTime @default(now()) @map("create_time")

  @@id([roleId, menuId])
  @@map("role_menu")
}
