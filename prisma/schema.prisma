// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id         Int      @id @default(autoincrement())
  // 用户昵称
  name       String   @unique
  // 用户姓名
  username   String
  password   String
  phone      String?
  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  roles UserRole[]

  @@map("user")
}

// 角色表
model Role {
  id          Int      @id @default(autoincrement())
  roleName    String   @unique
  description String?
  createTime  DateTime @default(now()) @map("createTime")
  updateTime  DateTime @updatedAt @map("updateTime")

  users UserRole[]
  menus RoleMenu[]

  @@map("role")
}

// 菜单表
model Menu {
  id         Int      @id @default(autoincrement())
  name       String
  // 菜单的父菜单id，默认为1
  pid        Int?
  // 菜单类型，菜单为1，按钮为2
  type       Int?
  // 菜单的等级
  level      Int?
  // 菜单权限值
  code       String?
  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  roles RoleMenu[]

  @@map("menu")
}

// 图片表
model Image {
  id            Int             @id @default(autoincrement())
  url           String
  // 文件的hash值
  hash          String
  createTime    DateTime        @default(now()) @map("createTime")
  updateTime    DateTime        @updatedAt @map("updateTime")
  // 引用次数，在管理表时，为0时删除该数据
  num           Int             @default(0)
  trademark     Trademark[]
  imageRelation ImageRelation[]

  @@map("image")
}

// 图片关系表
model ImageRelation {
  id         Int      @id @default(autoincrement())
  // 1为用户头像  2为品牌头像  3为Spu图标 4为sku图标
  type       Int?
  // 对应类型表的id
  tid        Int?
  imageId    Int?     @map("image_id")
  image      Image?   @relation(fields: [imageId], references: [id])
  createTime DateTime @default(now()) @map("create_time")

  @@map("image_relation")
}

// 品牌表
model Trademark {
  id         Int      @id @default(autoincrement())
  tmName     String
  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")
  imageId    Int?     @map("image_id")
  image      Image?   @relation(fields: [imageId], references: [id])
  spus       Spu[]

  @@map("trademark")
}

// 商品分类表
model Category {
  id         Int      @id @default(autoincrement())
  name       String
  pid        Int
  level      Int      @default(1)
  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  attrs Attr[]
  spus  Spu[]

  @@map("category")
}

// 商品属性表
model Attr {
  id         Int      @id @default(autoincrement())
  attrName   String
  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  attrValue AttrValue[]
  spus      SpuAttr[]

  @@map("attr")
}

// 商品属性值表
model AttrValue {
  id         Int      @id @default(autoincrement())
  valueName  String
  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")
  attrId     Int
  attr       Attr     @relation(fields: [attrId], references: [id], onDelete: Cascade)

  spus SpuAttrValue[]
  skus SkuAttrValue[]

  @@map("attr_value")
}

// SPU
model Spu {
  id          Int       @id @default(autoincrement())
  spuName     String
  description String?
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tmId        Int
  trademark   Trademark @relation(fields: [tmId], references: [id], onDelete: Cascade)
  createTime  DateTime  @default(now()) @map("createTime")
  updateTime  DateTime  @updatedAt @map("updateTime")

  attrs      SpuAttr[]
  attrValues SpuAttrValue[]
  skus       SpuSku[]

  @@map("spu")
}

// sku
model Sku {
  id      Int     @id @default(autoincrement())
  price   Float
  skuName String
  skuDesc String?
  weight  Float?
  isSale  Int?    @default(0)

  createTime DateTime @default(now()) @map("createTime")
  updateTime DateTime @updatedAt @map("updateTime")

  spus       SpuSku[]
  attrValues SkuAttrValue[]

  @@map("sku")
}

// 关系表

// 用户_角色关系表
model UserRole {
  userId     Int      @map("user_id") // 使用 `@map` 映射到 `user_id` 列
  roleId     Int      @map("role_id") // 使用 `@map` 映射到 `role_id` 列
  user       User     @relation(fields: [userId], references: [id]) // 定义与 User 的关系
  role       Role     @relation(fields: [roleId], references: [id]) // 定义与 Role 的关系
  createTime DateTime @default(now()) @map("create_time") // 创建时间，默认为当前时间

  @@id([userId, roleId]) // 复合主键，由 userId 和 roleId 组成
  @@map("user_role") // 自定义表名
}

// 角色_菜单关系表
model RoleMenu {
  roleId     Int      @map("role_id")
  menuId     Int      @map("menu_id")
  role       Role     @relation(fields: [roleId], references: [id])
  menu       Menu     @relation(fields: [menuId], references: [id])
  createTime DateTime @default(now()) @map("create_time")

  @@id([roleId, menuId])
  @@map("role_menu")
}

// spu_属性关系表
model SpuAttr {
  attr       Attr     @relation(fields: [attrId], references: [id])
  attrId     Int      @map("attr_id")
  spu        Spu      @relation(fields: [spuId], references: [id])
  spuId      Int      @map("spu_id")
  createTime DateTime @default(now()) @map("create_time")

  @@id([attrId, spuId])
  @@map("spu_attr")
}

// spu_属性值关系表
model SpuAttrValue {
  attrValue   AttrValue @relation(fields: [attrValueId], references: [id])
  attrValueId Int       @map("attr_value_id")
  spu         Spu       @relation(fields: [spuId], references: [id])
  spuId       Int       @map("spu_id")
  createTime  DateTime  @default(now()) @map("create_time")

  @@id([attrValueId, spuId])
  @@map("spu_attr_value")
}

// spu_sku关系表
model SpuSku {
  Spu        Spu      @relation(fields: [spuId], references: [id])
  spuId      Int
  Sku        Sku      @relation(fields: [skuId], references: [id])
  skuId      Int
  createTime DateTime @default(now()) @map("create_time")

  @@id([skuId, spuId])
  @@map("spu_sku")
}

// sku_属性值
model SkuAttrValue {
  attrValue   AttrValue @relation(fields: [attrValueId], references: [id])
  attrValueId Int       @map("attr_value_id")
  sku         Sku       @relation(fields: [skuId], references: [id])
  skuId       Int       @map("sku_id")
  createTime  DateTime  @default(now()) @map("create_time")

  @@id([attrValueId, skuId])
  @@map("sku_attr_value")
}
